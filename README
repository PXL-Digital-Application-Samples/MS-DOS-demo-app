DOS REST API SERVER
==================

A complete REST API server implementation using pure DOS batch files. This project 
demonstrates HTTP request processing, JSON response generation, and file-based 
database operations - all accomplished without any external dependencies beyond 
standard DOS commands.


FEATURES
========

- Complete HTTP Implementation: Request parsing, response generation, proper headers
- JSON Processing: Parse request bodies, generate JSON responses
- RESTful API: GET, POST, PUT, DELETE operations with proper HTTP status codes
- File-based Database: JSON file storage with atomic operations
- Request Routing: Pattern matching for different endpoints
- CRUD Operations: Full user management functionality


ARCHITECTURE
============

The server uses a hybrid Unix/DOS architecture:

- SERVER.BAT - HTTP server using busybox httpd
- HANDLERS/*.BAT - DOS batch files implementing actual API logic
- DATA/*.TXT - JSON user database files  
- cgi-bin/* - Unix shell scripts (busybox sh) that bridge to DOS batch files

KEY INSIGHT: Busybox on Windows includes its own Unix shell environment. The CGI 
scripts run in busybox's built-in sh/bash, but call Windows DOS batch files via 
'cmd /c' to perform the actual API operations. This creates a unique hybrid where 
Unix CGI handling meets pure DOS batch processing.


QUICK START
===========

1. Start the server directly:

   SERVER.BAT
   
The server will automatically initialize the database and start listening on port 9000.


PROJECT STRUCTURE
==================

/
├── SERVER.BAT             # Main HTTP server
├── INIT_DB.BAT            # Database setup
├── GETNXTID.BAT           # ID generator
├── TEST_API.BAT           # Comprehensive API test suite
├── httpd.conf             # Busybox HTTP server configuration
├── DATA/                  # User database (JSON files)
├── HANDLERS/              # API endpoint handlers
│   ├── GETUSERS.BAT       # GET /users
│   ├── GETUSER.BAT        # GET /users/{id}
│   ├── CREATUSR.BAT       # POST /users
│   ├── UPDTUSER.BAT       # PUT /users/{id}
│   └── DELUSER.BAT        # DELETE /users/{id}
├── cgi-bin/               # CGI bridge scripts
│   ├── users              # Multi-method handler for /users
│   └── user               # Multi-method handler for /user/{id}
└── TEMP/                  # Working directory


USAGE
=====

1. Start the server:

   SERVER.BAT
   
2. The server will listen on port 9000 (using busybox httpd)

3. Test with curl:

   curl http://localhost:9000/cgi-bin/users
   curl -X POST -H "Content-Type: application/json" -d "{\"name\":\"Dave\",\"email\":\"dave@example.com\"}" http://localhost:9000/cgi-bin/users

NOTE: The current implementation uses busybox httpd which requires the /cgi-bin/ 
path prefix for CGI script execution. This is a limitation of busybox httpd's 
hardcoded CGI detection.


TESTING
=======

Use the provided test script to verify all functionality:

    TEST_API.BAT

This script tests all CRUD operations (Create, Read, Update, Delete) and error 
handling.


API ENDPOINTS
=============

- GET /cgi-bin/users - List all users
- GET /cgi-bin/user/{id} - Get specific user
- POST /cgi-bin/users - Create new user (Body: {"name": "string", "email": "string"})
- PUT /cgi-bin/user/{id} - Update user (Body: {"name": "string", "email": "string"})
- DELETE /cgi-bin/user/{id} - Delete user


DATA FORMAT
===========

Users are stored as JSON in individual files: DATA/USER_{id}.TXT

Example:

{"id": 1, "name": "Alice", "email": "alice@example.com"}


REQUIREMENTS
============

- DOS/Windows command prompt (cmd.exe)
- busybox for Windows (includes httpd server and Unix shell)
  - Provides busybox httpd for HTTP server functionality
  - Includes built-in sh/bash shell for CGI script execution
  - Available via Scoop: scoop install busybox


LIMITATIONS
===========

- Basic JSON parsing (no nested objects)
- No concurrent request handling
- Simple HTTP implementation
- Educational purposes only
